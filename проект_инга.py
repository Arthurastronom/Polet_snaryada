# -*- coding: utf-8 -*-
"""проект_Инга

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qb0dJTLurhCdu2gBTJHB7oN_1lPJkOf2
"""

from numpy import *
import matplotlib.pyplot as plt
import math
# Функция f подготавливает массив, содержащий элементы вектор-функции,
# определяющей правую часть решаемой системы ОДУ
def f(u,g,k,mass):
  #вектор u состоит из x-y-vx-vy
  f = zeros(4)
  f[0] = u[2]
  f[1] = u[3]
  f[2] = 0. - k/mass*sqrt(u[2]**2 + u[3]**2)*u[2]
  f[3] = -g - k/mass*sqrt(u[2]**2 + u[3]**2)*u[3]
  return f

# Определение входных данных задачи
# для максимальной дальности ( угол 45) получаем, что скорсоть должна быть
d=1500
g = 9.81;
vmin=sqrt(d*g)
print('v_min= ',round(vmin,1))
if vmin>700:
  print('Нужно использовать танк с большей дальностью выстрела')
else:
  v_0=600
  print('v_0= ',v_0)

x_0 = 0.; y_0 = 0.
k = 0.009; mass = 6.
print('k= ',k,' m= ',mass)
# Расчет теоретических величин
Hmax=vmin**2*math.sin(pi/4)**2/(2*g)
Lmax=vmin**2*math.sin(2*pi/4)/g
tmax=2*vmin*math.sin(pi/4)/g
t_0 = 0.; T = tmax*3
# Определение числа интервалов сетки,
# на которой будет искаться приближённое решение
M = 5000;
print('Теоретические величны в отсутствии сопротивления')
print('Hmax= ',round(Hmax,2),' Lmax= ',round(Lmax,2),' tmax= ',round(tmax,2))
# Определение сетки
tau = (T - t_0)/M
t = linspace(t_0,T,M + 1)
xa=[]
ya=[]
# Построение аналитического решения
for i in t:
  xa.append(vmin*cos(pi/4)*i)
  ya.append(vmin*sin(pi/4)*i-g*i**2/2)
  if ya[-1]<0: # выход если компонента Оу станет меньше нуля (под землей)
    break

# Выделение памяти под массив сеточных значений решения системы ОДУ
# В строке с номером m этого массива хранятся сеточные значения решения,
# соответствующие моменту времени t_m

def solution():
  # Задание начальных условий
  # (записываются строку с номером 0 массива u)
  u = zeros((M + 1,4))
  u[0,0] = x_0; u[0,1] = y_0
  u[0,2] = v_0*cos(alpha); u[0,3] = v_0*sin(alpha)

  # Реализация схемы Эйлера
  for m in range(M):
    if u[m][1]>=0: # пока компонента Оу больше нуля
      u[m + 1] = u[m] + tau*f(u[m],g,k,mass)
    else:
      break
  # Выводим разницу между расстояниями S-d
  return round(u[m,0]-d,2)

table=[]
table1=[]
alpha = pi/4
table1.append(round(alpha*180/pi,2))
table1.append(solution())
table.append(table1)
start=table1[-1]
table1=[]
alpha = pi/4-0.02
table1.append(round(alpha*180/pi,2))
table1.append(solution())
table.append(table1)
step=0.001
count=1
if abs(table[-2][1])>abs(table[-1][1]):
  step=step*(-1)
while True:
  if abs(table[-1][1])<0.2:# отклонение по в метрах по Ох 0.2м = 20см
    print('Успех','alpha= ',round(table[-1][0]),'degree')
    break
  if abs(table[-1][1])>20:
    koeff=10
  elif abs(table[-1][1])>=5 and abs(table[-1][1])<=20:
    koeff=2
  else:
    koeff=0.1
  alpha=alpha+step*(koeff)
  table1=[]
  table1.append(round(alpha*180/pi,2))
  table1.append(solution())
  table.append(table1)
  count=count+1
  if alpha*180/pi>90:
    print('Угол больще 90')
    break
  if count>100:
    break
  if abs(table[-1][1]-table[-2][1])<0.01:
    print(' Расстояние перестало меняться')
    break
  #print(koeff)
mas=np.array(table)
plt.scatter(mas[:,0],mas[:,1])
title('Зависимость разности расстояний от угла')
xlabel('угол в градусах'); ylabel('разность в метрах')
from google.colab import files
dir = "/content/drive/MyDrive/численные методы"
plt.xlabel('угол в градусах, Целевое растояние %d м' % d)
plt.savefig('fig_1')

pip install Pillow

mas

def solution():
  # Задание начальных условий
  # (записываются строку с номером 0 массива u)
  u = zeros((M + 1,4))
  u[0,0] = x_0; u[0,1] = y_0
  u[0,2] = v_0*cos(alpha); u[0,3] = v_0*sin(alpha)

  # Реализация схемы Эйлера
  for m in range(M):
    if u[m][1]>=0:
      u[m + 1] = u[m] + tau*f(u[m],g,k,mass)
    else:
      #print('снаряд упал','u[0]= ',round(u[m,0],2))
      break
  # Отрисовка решения

  plt.plot(u[:,0],u[:,1],'-ro',markersize=5)
  plt.plot(xa,ya)
  plt.title('Траектория движения тела')
  plt.xlabel('x'); plt.ylabel('y')
  plt.legend(['с сопр','без сопр'])
  plt.savefig('fig_1')
  return round(u[m,0]-d,2)
alpha=47.7*3.14/180
a=solution()

